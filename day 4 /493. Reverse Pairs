class Solution {
public:
    int ans = 0;
    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        merge_sort(nums, 0, n - 1);
        return ans;
    }
    void merge_sort(vector<int>& nums, int lb, int ub) {
        if (lb >= ub)
            return;
        int mid = ((ub - lb) / 2) + lb;
        merge_sort(nums, lb, mid);
        merge_sort(nums, mid + 1, ub);
        merge(mid, lb, ub, nums);
    }
    void merge(int mid, int lb, int ub, vector<int>& arr) {
        int j = mid + 1;
        for (int i = lb; i <= mid; i++) {
            while (j <= ub && arr[i] > (long)2 * arr[j]) {
                j++;
            }
            ans += j - mid - 1;
        }

        vector<int> temp;
        int i = lb;
        j = mid + 1;
        while (i <= mid && j <= ub) {
            if (arr[i] < arr[j]) {
                temp.push_back(arr[i]);
                i++;
            } else {
                temp.push_back(arr[j++]);
            }
        }
        while (i <= mid) {
            temp.push_back(arr[i++]);
        }
        while (j <= ub) {
            temp.push_back(arr[j++]);
        }

        for (int k = lb; k <= ub; k++) {
            arr[k] = temp[k - lb];
        }
    }
};
