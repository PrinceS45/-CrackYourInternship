/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if (!head || !head->next)
            return head;
        ListNode *slow = head, *fast = head, *prevS = NULL;
        while (fast && fast->next) {
            prevS = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        prevS->next = NULL;
        // caal rcursive
        ListNode* ptr1 = sortList(head);
        ListNode* ptr2 = sortList(slow);
        // merege two sortwest list
        return merge(ptr1, ptr2);
    }
    ListNode* merge(ListNode* head1, ListNode* head2) {
        ListNode* ans = new ListNode(-1);
        ListNode* res = ans;
        while (head1 && head2) {
            if (head1->val < head2->val) {
                ans->next = head1;

                head1 = head1->next;
            } else {
                ans->next = head2;

                head2 = head2->next;
            }
            ans = ans->next;
        }

        if (!head2) {
            ans->next = head1;
        } else
            ans->next = head2;

        return res->next;
    }
};
