class Solution 
{
    public:
    
    int r[8] = {-1,-2,-2,-1,1,2,2,1} ;
    int c[8] ={-2,-1,1,2,2,1,-1,-2} ;
     int n ;
     
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    // Code here
	    n = N ;
	    KnightPos[0]--;
	    KnightPos[1]-- ;
	    TargetPos[0]-- ; 
	    TargetPos[1]--;
	    vector< vector<bool>> board(N,vector<bool> (N,0)) ;
	    queue<pair<int,int>> q ; 
	     q.push(make_pair(KnightPos[0],KnightPos[1])) ; 
	       board[KnightPos[0]][KnightPos[1]] = 1 ;
	if(KnightPos[0] ==TargetPos[0] && KnightPos[1] == TargetPos[1]) return 0 ;
	       int count = 0 ; 
	       while(!q.empty()) {
	           int size =q.size() ; 
	           count++ ; 
	           while(size--) {
	                int i = q.front().first ; 
	                int j = q.front().second; 
	                q.pop() ;
	                for(int  k = 0 ; k < 8 ; k++) {
	                    int rn = r[k] + i , cn = c[k] + j ; 
	                   
	                    if(isValid(rn,cn) && !board[rn][cn]) {
	                         if(rn==TargetPos[0] && cn == TargetPos[1]) return count ; 
	                        q.push({rn , cn }) ;
	                        board[rn][cn] = 1 ;
	                    }
	                }
	               
	           }
	           
	       }
	       return -1 ;
	    
	}
	bool isValid(int i , int j) {
	    return i >= 0 && j >= 0 && i < n && j < n ;
	}
};
