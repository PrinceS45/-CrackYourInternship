/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if( !head || !head->next) return head ; 
         // check if there is k nodes or not ;
          ListNode* check = head ; 
          for(int i = 0 ; i < k ; i++) {
             if(! check) return head ; 
             check = check->next ; 
          }  
         
         // reverse k nodes 
         ListNode* prev =  NULL , * next = NULL , *curr = head ;
           int i = 1 ;  
         while( i <= k ) {
             next = curr->next ; 
             curr->next = prev ;
             prev = curr ; 
             curr= next ;
             i++ ;
         }
          // recursive call to next group 
         head->next = reverseKGroup(curr,k) ;
         // as we know prev is head of new reverse group
         return prev ;
    }
};
