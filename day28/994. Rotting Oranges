class Solution 
{
    public:
     int r[4] = {0, 0, -1, 1};
    int c[4] = {-1, 1, 0, 0};
    int m, n;
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
       m = grid.size(), n = grid[0].size();
        int ans = 0;
        int count_fresh = 0 ; 
        queue<pair<int,int>> q;
         for(int i = 0 ; i < m ; i++) {
            for(int j =0  ; j < n ; j++ ) {
                if(grid[i][j] == 2) {
                    q.push({i,j}) ; 
                }
                if(grid[i][j]==1) count_fresh ++ ; 
            }
         }
        
           
           while(! q.empty()) {
                int size = q.size() ; 
                    while (size--) {
                            int row = q.front().first, col = q.front().second;
                                 q.pop();
                            for (int k = 0; k < 4; k++) {
                                int rn = row + r[k], cn = col + c[k];
                                if (isValid(rn, cn) && grid[rn][cn] == 1) {
                                    count_fresh -- ; 
                                    grid[rn][cn] = 2;
                                    q.push({rn, cn});
                                }
                            }
                        }
                    
                        ans++ ; 
                    }
                   if(count_fresh != 0) return -1 ; 
           return ans==0 ? 0 : ans-1 ; 
    }
    bool isValid(int i , int j) {
        return i >=0 && j >=0 && i < m && j < n;
    }
};
