class Solution {
public:
    vector<int> ans;

    vector<int> countSmaller(vector<int>& nums) {
        int n = nums.size();
        vector<pair<int, int>> index(n);
        ans = vector<int>(n, 0);
        for (int i = 0; i < n; i++) {
            index[i] = {nums[i], i};
        }

        merge_sort(0, n - 1, index);
        return ans;
    }
    void merge_sort(int s, int e, vector<pair<int, int>>& index) {
        if (s >= e)
            return;
        int mid = s + (e - s) / 2;
        merge_sort(s, mid, index);
        merge_sort(mid + 1, e, index);
        merge(s, mid, e, index);
        return;
    }
    void merge(int lb, int mid, int ub, vector<pair<int, int>>& nums) {
        int l = mid - lb + 1;
        int r = ub - mid;
        vector<pair<int, int>> left(l), right(r);
        for (int i = 0; i < l; i++) {
            left[i] = nums[i + lb];
        }
        for (int i = 0; i < r; i++) {
            right[i] = nums[i + mid + 1];
        }

        int i = 0, j = 0, k = lb, count = 0;
        while (i < l && j < r) {
            if (left[i].first <= right[j].first) {
                nums[k] = left[i];
                ans[left[i].second] += count;
                i++;
                k++;
            } else {
                count++;
                nums[k] = right[j];
                j++;
                k++;
            }
        }

        while (i < l) {
            nums[k] = left[i];
            ans[left[i].second] += count;
            i++;
            k++;
        }
        while (j < r) {
            nums[k] = right[j];
            j++;
            k++;
        }
    }
};
