/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
  ListNode* rev(ListNode * head ) {
          ListNode* curr = head , * prev = NULL , *next=NULL ; 
          while(curr) {
              next = curr->next ; 
              curr->next = prev ; 
              prev = curr ; 
              curr = next ; 
          }
          return prev  ; 
    }
    bool isPalindrome(ListNode* head) {
        if(! head or ! head->next ) return true ;
        ListNode* slow = head , * fast = head , *midPrev = NULL ;
        while(fast && fast->next) {
            midPrev = slow ;
            slow=slow->next ; 
            fast = fast->next->next ;
        } 
        midPrev->next = NULL ;
        ListNode* mid = rev(slow) ;
        ListNode* one = head ;
        while(one) {
            if(one->val != mid->val) return false ;
            one=one->next ; 
            mid=mid->next ;
        }
        return true ;

    }
};
