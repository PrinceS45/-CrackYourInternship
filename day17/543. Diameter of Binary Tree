/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    int ans = INT_MIN;
    int diameterOfBinaryTree(TreeNode* root) {
        auto x = helper(root);
        return x.first - 1;
    }
    pair<int, int> helper(TreeNode* root) {
        if (root == NULL)
            return {0, 0};
        auto left = helper(root->left);
        auto right = helper(root->right); // first -> diameter sec = heoght
        int ans1 = left.first;
        int ans2 = right.first;
        int ans3 = left.second + right.second + 1;
        return make_pair(max(ans1, max(ans2, ans3)),
                         max(left.second, right.second) + 1);
    }
};
