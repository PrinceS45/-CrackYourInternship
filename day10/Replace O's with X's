
class Solution{
public:
         int r[4] = {0, 0, -1, 1};
    int c[4] = {-1, 1, 0, 0};
    int m ; 
    int n ;
     bool isValid(int i , int j ) {
        return i >= 0 && i < n && j >= 0 &&  j < m;
     }
    vector<vector<char>> fill(int nn, int mm, vector<vector<char>> board)
    {
        // code here
   
        queue<pair<int,int> >q ; 
        n=nn , m = mm ; 
         // traverse all 4 boundary
         // first row
         for(int i = 0 ; i < m ; i++) {
            if(board[0][i]=='O') {
                q.push({0,i});
                board[0][i]='P' ; 
            }
         }
         //first col 
           for(int i = 1 ; i < n ; i++) {
            if(board[i][0]=='O') {
                q.push({i,0});
                board[i][0]='P' ; 
            }
         }

         // last row 
           for(int i = 1 ; i < m ; i++) {
            if(board[n-1][i]=='O') {
                q.push({n-1,i});
                board[n-1][i]='P' ; 
            }
         }

         // last col 
           for(int i = 1 ; i < n-1; i++) {
            if(board[i][m-1]=='O') {
                q.push({i,m-1});
                board[i][m-1]='P' ; 
            }
         }

         while(! q.empty()) {
            int row = q.front().first;
            int col = q.front().second;
            q.pop() ;
            for(int i = 0 ; i < 4 ; i++) {
                if(isValid(row+r[i],col+c[i]) && board[row+r[i]][col+c[i]]=='O') {
                    board[row+r[i]][col+c[i]]='P';
                    q.push({row+r[i],col+c[i]}) ;
                }
            }
         }

         // convert p in to 0  and o in to x ; 
         for(int i = 0 ; i < n ; i++) {
            for(int j =0 ; j < m ; j++) {
                if(board[i][j]=='P') board[i][j]='O';
                else if (board[i][j]=='O') board[i][j]='X';
            }
         }
         return board;



    
    }
};
